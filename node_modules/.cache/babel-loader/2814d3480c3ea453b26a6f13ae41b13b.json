{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcoppola/Desktop/Programming/udemy-courses/react-redux/dice_playground/src/index.js\";\nimport React from 'react';\nimport ReactDom from 'react-dom'; // Import Components\n\nimport DefenseActions from './components/DefenseActions';\nimport OffenseActions from './components/OffenseActions';\nimport UmpireActions from './components/UmpireActions';\nimport GameOutput from './components/GameOutput';\nimport GameStats from './components/GameStats';\nimport GameInfo from './components/GameInfo';\nimport ListGames from './components/ListGames';\nimport { umpIndicator, pitchCount } from './umpire/pitchLogic';\nimport { outsTracker } from './umpire/gameFlow';\nimport './style.css';\n\nclass GameConsole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameInfo: {},\n      gamesList: {},\n      stats: {\n        inning: 0.5,\n        strikes: 0,\n        balls: 0,\n        outs: 0\n      },\n      output: ['Waiting on first pitch to begin the game...'],\n      umpireOverwrite: false\n    };\n    this.handleDefenseAction = this.handleDefenseAction.bind(this);\n    this.handleOffenseAction = this.handleOffenseAction.bind(this);\n    this.handleUmpireAction = this.handleUmpireAction.bind(this);\n  }\n\n  async componentDidMount() {\n    const gamesData = await fetch(`https://diceball-api.herokuapp.com/game?homeTeam=XXX`);\n    const gamesList = await gamesData.json();\n    this.setState({\n      gamesList: gamesList\n    });\n    console.log(gamesList);\n    const data = await fetch('https://diceball-api.herokuapp.com/game/5e41e894543782192509942a');\n    const gameData = await data.json();\n    const gameStats = gameData[0];\n    this.setState({\n      gameInfo: {\n        _id: gameStats._id,\n        date: gameStats.date,\n        homeTeam: gameStats.homeTeam,\n        awayTeam: gameStats.awayTeam,\n        homeScore: gameStats.homeScore,\n        awayScore: gameStats.awayScore\n      },\n      stats: {\n        inning: gameStats.inning,\n        strikes: gameStats.strikes,\n        balls: gameStats.balls,\n        outs: gameStats.outs\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    let endOfInning = outsTracker(this.state.stats.outs);\n\n    if (endOfInning) {\n      let inningOver = \"[ UMPIRE ] Three outs.  Inning is over.  Click 'Pitch' to start new Inning.\";\n      this.setState(state => {\n        state.stats.outs = 0;\n        state.stats.inning += 0.5;\n        state.stats.strikes = 0;\n        state.stats.balls = 0;\n        const output = [inningOver, ...state.output];\n        return {\n          output\n        };\n      });\n    }\n\n    if (this.state.umpireOverwrite) {\n      this.handleDefenseAction({\n        text: 'Umpire Overwrite',\n        defenseType: 'umpireOverwrite'\n      });\n      this.setState(state => {\n        state.umpireOverwrite = false;\n      });\n    }\n  }\n\n  handleDefenseAction(defenseAction) {\n    let defense = '[ DEFENSE ] ';\n    let pitchCall = 'Umpire Overwrites Balls or Strikes';\n\n    if (defenseAction.defenseType === 'fielder' || defenseAction.defenseType === 'pick-off') {\n      this.setState(state => {\n        const output = [defense.concat(defenseAction.text), ...state.output];\n        return {\n          output\n        };\n      });\n    } else if (defenseAction.defenseType === 'pitcher' || defenseAction.defenseType === 'umpireOverwrite') {\n      this.setState(state => {\n        if (defenseAction.defenseType === 'pitcher') {\n          let pitchResults = pitchCount(defenseAction.roll, this.state.stats);\n          state.stats.balls = pitchResults.balls;\n          state.stats.strikes = pitchResults.strikes;\n          pitchCall = pitchResults.pitchCall;\n        }\n\n        const currentBatter = umpIndicator(this.state.stats);\n        const batterReset = 'resetting balls and strikes based on umpIndicator...';\n\n        if (currentBatter.walk || currentBatter.strikeout) {\n          state.stats.balls = 0;\n          state.stats.strikes = 0;\n        }\n\n        if (currentBatter.strikeout === true) {\n          state.stats.outs += 1;\n        }\n\n        const output = [!currentBatter.text ? defense.concat(defenseAction.text, ' >>> ', pitchCall) : defense.concat(defenseAction.text, ' -- ', pitchCall, ' -- ', currentBatter.text, ' -- ', batterReset), ...state.output];\n        return {\n          output\n        };\n      });\n    }\n  }\n\n  handleOffenseAction(offenseAction) {\n    let offense = '[ OFFENSE ] ';\n    this.setState(state => {\n      const output = [offense.concat(offenseAction), ...state.output];\n      return {\n        output\n      };\n    });\n  }\n\n  handleUmpireAction(umpireAction) {\n    let umpire = '[ UMPIRE ] ';\n    this.setState(state => {\n      const output = [umpire.concat(umpireAction.output), ...state.output];\n\n      if (umpireAction.inning) {\n        state.stats.inning < 0 ? state.stats.inning = 0 : state.stats.inning += umpireAction.inning;\n      } else if (umpireAction.out) {\n        state.stats.outs < 0 ? state.stats.outs = 0 : state.stats.outs += umpireAction.out;\n      } else if (umpireAction.strike) {\n        state.stats.strikes < 0 ? state.stats.strikes = 0 : state.stats.strikes += umpireAction.strike;\n        state.umpireOverwrite = true;\n      } else if (umpireAction.ball) {\n        state.stats.balls < 0 ? state.stats.balls = 0 : state.stats.balls += umpireAction.ball;\n        state.umpireOverwrite = true;\n      } else if (umpireAction.resetInning) {\n        state.stats.outs = 0;\n        state.stats.balls = 0;\n        state.stats.strikes = 0;\n      } else if (umpireAction.updateDatabase) {\n        let data = this.state.stats;\n        console.log(data);\n        fetch('https://diceball-api.herokuapp.com/game/update/5e41e894543782192509942a', {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        }).then(res => {\n          if (!res.ok) {\n            return Promise.reject(res.statusText);\n          }\n\n          return res.json();\n        });\n      }\n\n      return {\n        output\n      };\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Diceball!\"), React.createElement(\"div\", {\n      className: \"gameconsole\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(UmpireActions, {\n      onUmpireAction: this.handleUmpireAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(OffenseActions, {\n      onOffenseAction: this.handleOffenseAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(DefenseActions, {\n      onDefenseAction: this.handleDefenseAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(GameStats, {\n      stats: this.state.stats,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"playinfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(GameOutput, {\n      output: this.state.output,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"break\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(GameInfo, {\n      gameInfo: this.state.gameInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(ListGames, {\n      gamesList: this.state.gamesList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nReactDom.render(React.createElement(GameConsole, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 229\n  },\n  __self: this\n}), document.querySelector('#root'));","map":{"version":3,"sources":["/Users/matthewcoppola/Desktop/Programming/udemy-courses/react-redux/dice_playground/src/index.js"],"names":["React","ReactDom","DefenseActions","OffenseActions","UmpireActions","GameOutput","GameStats","GameInfo","ListGames","umpIndicator","pitchCount","outsTracker","GameConsole","Component","constructor","props","state","gameInfo","gamesList","stats","inning","strikes","balls","outs","output","umpireOverwrite","handleDefenseAction","bind","handleOffenseAction","handleUmpireAction","componentDidMount","gamesData","fetch","json","setState","console","log","data","gameData","gameStats","_id","date","homeTeam","awayTeam","homeScore","awayScore","componentDidUpdate","endOfInning","inningOver","text","defenseType","defenseAction","defense","pitchCall","concat","pitchResults","roll","currentBatter","batterReset","walk","strikeout","offenseAction","offense","umpireAction","umpire","out","strike","ball","resetInning","updateDatabase","method","headers","body","JSON","stringify","then","res","ok","Promise","reject","statusText","render","document","querySelector"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\n\n// Import Components\nimport DefenseActions from './components/DefenseActions';\nimport OffenseActions from './components/OffenseActions';\nimport UmpireActions from './components/UmpireActions';\nimport GameOutput from './components/GameOutput';\nimport GameStats from './components/GameStats';\nimport GameInfo from './components/GameInfo';\nimport ListGames from './components/ListGames';\n\nimport { umpIndicator, pitchCount } from './umpire/pitchLogic';\nimport { outsTracker } from './umpire/gameFlow';\n\nimport './style.css';\n\nclass GameConsole extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tgameInfo: {},\n\t\t\tgamesList: {},\n\t\t\tstats: {\n\t\t\t\tinning: 0.5,\n\t\t\t\tstrikes: 0,\n\t\t\t\tballs: 0,\n\t\t\t\touts: 0\n\t\t\t},\n\t\t\toutput: [\n\t\t\t\t'Waiting on first pitch to begin the game...'\n\t\t\t],\n\t\t\tumpireOverwrite: false\n\t\t};\n\n\t\tthis.handleDefenseAction = this.handleDefenseAction.bind(this);\n\t\tthis.handleOffenseAction = this.handleOffenseAction.bind(this);\n\t\tthis.handleUmpireAction = this.handleUmpireAction.bind(this);\n\t}\n\n\tasync componentDidMount () {\n\t\tconst gamesData = await fetch(`https://diceball-api.herokuapp.com/game?homeTeam=XXX`);\n\t\tconst gamesList = await gamesData.json();\n\t\tthis.setState({ gamesList: gamesList });\n\t\tconsole.log(gamesList);\n\n\t\tconst data = await fetch('https://diceball-api.herokuapp.com/game/5e41e894543782192509942a');\n\t\tconst gameData = await data.json();\n\t\tconst gameStats = gameData[0];\n\t\tthis.setState({\n\t\t\tgameInfo: {\n\t\t\t\t_id: gameStats._id,\n\t\t\t\tdate: gameStats.date,\n\t\t\t\thomeTeam: gameStats.homeTeam,\n\t\t\t\tawayTeam: gameStats.awayTeam,\n\t\t\t\thomeScore: gameStats.homeScore,\n\t\t\t\tawayScore: gameStats.awayScore\n\t\t\t},\n\t\t\tstats: {\n\t\t\t\tinning: gameStats.inning,\n\t\t\t\tstrikes: gameStats.strikes,\n\t\t\t\tballs: gameStats.balls,\n\t\t\t\touts: gameStats.outs\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentDidUpdate () {\n\t\tlet endOfInning = outsTracker(this.state.stats.outs);\n\t\tif (endOfInning) {\n\t\t\tlet inningOver = \"[ UMPIRE ] Three outs.  Inning is over.  Click 'Pitch' to start new Inning.\";\n\t\t\tthis.setState((state) => {\n\t\t\t\tstate.stats.outs = 0;\n\t\t\t\tstate.stats.inning += 0.5;\n\t\t\t\tstate.stats.strikes = 0;\n\t\t\t\tstate.stats.balls = 0;\n\n\t\t\t\tconst output = [\n\t\t\t\t\tinningOver,\n\t\t\t\t\t...state.output\n\t\t\t\t];\n\t\t\t\treturn { output };\n\t\t\t});\n\t\t}\n\n\t\tif (this.state.umpireOverwrite) {\n\t\t\tthis.handleDefenseAction({ text: 'Umpire Overwrite', defenseType: 'umpireOverwrite' });\n\t\t\tthis.setState((state) => {\n\t\t\t\tstate.umpireOverwrite = false;\n\t\t\t});\n\t\t}\n\t}\n\n\thandleDefenseAction (defenseAction) {\n\t\tlet defense = '[ DEFENSE ] ';\n\t\tlet pitchCall = 'Umpire Overwrites Balls or Strikes';\n\n\t\tif (defenseAction.defenseType === 'fielder' || defenseAction.defenseType === 'pick-off') {\n\t\t\tthis.setState((state) => {\n\t\t\t\tconst output = [\n\t\t\t\t\tdefense.concat(defenseAction.text),\n\t\t\t\t\t...state.output\n\t\t\t\t];\n\t\t\t\treturn { output };\n\t\t\t});\n\t\t} else if (defenseAction.defenseType === 'pitcher' || defenseAction.defenseType === 'umpireOverwrite') {\n\t\t\tthis.setState((state) => {\n\t\t\t\tif (defenseAction.defenseType === 'pitcher') {\n\t\t\t\t\tlet pitchResults = pitchCount(defenseAction.roll, this.state.stats);\n\n\t\t\t\t\tstate.stats.balls = pitchResults.balls;\n\t\t\t\t\tstate.stats.strikes = pitchResults.strikes;\n\t\t\t\t\tpitchCall = pitchResults.pitchCall;\n\t\t\t\t}\n\n\t\t\t\tconst currentBatter = umpIndicator(this.state.stats);\n\t\t\t\tconst batterReset = 'resetting balls and strikes based on umpIndicator...';\n\n\t\t\t\tif (currentBatter.walk || currentBatter.strikeout) {\n\t\t\t\t\tstate.stats.balls = 0;\n\t\t\t\t\tstate.stats.strikes = 0;\n\t\t\t\t}\n\n\t\t\t\tif (currentBatter.strikeout === true) {\n\t\t\t\t\tstate.stats.outs += 1;\n\t\t\t\t}\n\n\t\t\t\tconst output = [\n\t\t\t\t\t!currentBatter.text\n\t\t\t\t\t\t? defense.concat(defenseAction.text, ' >>> ', pitchCall)\n\t\t\t\t\t\t: defense.concat(\n\t\t\t\t\t\t\t\tdefenseAction.text,\n\t\t\t\t\t\t\t\t' -- ',\n\t\t\t\t\t\t\t\tpitchCall,\n\t\t\t\t\t\t\t\t' -- ',\n\t\t\t\t\t\t\t\tcurrentBatter.text,\n\t\t\t\t\t\t\t\t' -- ',\n\t\t\t\t\t\t\t\tbatterReset\n\t\t\t\t\t\t\t),\n\t\t\t\t\t...state.output\n\t\t\t\t];\n\n\t\t\t\treturn { output };\n\t\t\t});\n\t\t}\n\t}\n\n\thandleOffenseAction (offenseAction) {\n\t\tlet offense = '[ OFFENSE ] ';\n\t\tthis.setState((state) => {\n\t\t\tconst output = [\n\t\t\t\toffense.concat(offenseAction),\n\t\t\t\t...state.output\n\t\t\t];\n\t\t\treturn { output };\n\t\t});\n\t}\n\n\thandleUmpireAction (umpireAction) {\n\t\tlet umpire = '[ UMPIRE ] ';\n\n\t\tthis.setState((state) => {\n\t\t\tconst output = [\n\t\t\t\tumpire.concat(umpireAction.output),\n\t\t\t\t...state.output\n\t\t\t];\n\t\t\tif (umpireAction.inning) {\n\t\t\t\tstate.stats.inning < 0 ? (state.stats.inning = 0) : (state.stats.inning += umpireAction.inning);\n\t\t\t} else if (umpireAction.out) {\n\t\t\t\tstate.stats.outs < 0 ? (state.stats.outs = 0) : (state.stats.outs += umpireAction.out);\n\t\t\t} else if (umpireAction.strike) {\n\t\t\t\tstate.stats.strikes < 0 ? (state.stats.strikes = 0) : (state.stats.strikes += umpireAction.strike);\n\t\t\t\tstate.umpireOverwrite = true;\n\t\t\t} else if (umpireAction.ball) {\n\t\t\t\tstate.stats.balls < 0 ? (state.stats.balls = 0) : (state.stats.balls += umpireAction.ball);\n\t\t\t\tstate.umpireOverwrite = true;\n\t\t\t} else if (umpireAction.resetInning) {\n\t\t\t\tstate.stats.outs = 0;\n\t\t\t\tstate.stats.balls = 0;\n\t\t\t\tstate.stats.strikes = 0;\n\t\t\t} else if (umpireAction.updateDatabase) {\n\t\t\t\tlet data = this.state.stats;\n\t\t\t\tconsole.log(data);\n\t\t\t\tfetch('https://diceball-api.herokuapp.com/game/update/5e41e894543782192509942a', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(data)\n\t\t\t\t}).then((res) => {\n\t\t\t\t\tif (!res.ok) {\n\t\t\t\t\t\treturn Promise.reject(res.statusText);\n\t\t\t\t\t}\n\t\t\t\t\treturn res.json();\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn { output };\n\t\t});\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<header>Diceball!</header>\n\t\t\t\t{/* <div className=\"ui four column grid container segment\"> */}\n\t\t\t\t<div className=\"gameconsole\">\n\t\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t\t<UmpireActions onUmpireAction={this.handleUmpireAction} />\n\t\t\t\t\t\t<OffenseActions onOffenseAction={this.handleOffenseAction} />\n\t\t\t\t\t\t<DefenseActions onDefenseAction={this.handleDefenseAction} />\n\t\t\t\t\t\t<GameStats stats={this.state.stats} />\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* <div className=\"ui two column centered grid container segment\"> */}\n\t\t\t\t\t<div className=\"playinfo\">\n\t\t\t\t\t\t<GameOutput output={this.state.output} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"break\" />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<GameInfo gameInfo={this.state.gameInfo} />\n\t\t\t\t\t\t<ListGames gamesList={this.state.gamesList} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nReactDom.render(<GameConsole />, document.querySelector('#root'));\n"]},"metadata":{},"sourceType":"module"}